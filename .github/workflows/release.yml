name: Rust Release Build

# Trigger on pushes of version tags (e.g. "v1.0.0")
on:
  push:
    tags:
      - 'v*'

env:
  CARGO_TERM_COLOR: always

jobs:
  # Build job runs for each OS specified in the matrix
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4

      # Optionally set up Rust (if not already available on the runner)
      - name: Set up Rust toolchain
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Build Release binary
        run: cargo build --release

      - name: Run tests
        run: cargo test --release

      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          # Replace 'your-binary-name' with your executableâ€™s name.
          # The asterisk (*) will match the .exe on Windows automatically.
          name: binary-${{ matrix.os }}
          path: target/release/your-binary-name*

  # Package job collects artifacts, packages them into one zip, and creates/releases the asset.
  package:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download Linux binary
        uses: actions/download-artifact@v3
        with:
          name: binary-ubuntu-latest
          path: binaries/linux

      - name: Download Windows binary
        uses: actions/download-artifact@v3
        with:
          name: binary-windows-latest
          path: binaries/windows

      - name: Create package structure and zip
        run: |
          # Create a folder structure in the package directory
          mkdir -p package/linux package/windows
          cp binaries/linux/* package/linux/
          cp binaries/windows/* package/windows/
          # Package the folder into a single release zip file
          zip -r release.zip package

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Automated release generated by GitHub Actions.
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./release.zip
          asset_name: release.zip
          asset_content_type: application/zip
